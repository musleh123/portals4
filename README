Portals 4 Reference Implementation
----------------------------------

* About

* Building

Portals utilizes the Autoconf/Automake/Libtool build system.  The
standard GNU configure script ane make system is used to build Portals
4.  To build:

  % autoreconf                   (only once, or when the build system has been updated)
  % ./configure <options>
  % make
  % make check
  % make install

The "make check" step is not strictly necessary, but is a good idea.

Options to configure include:

  --prefix=<DIR>          Install implementation in <DIR>


* Portals 4 Implementation Notes

  - Shared Memory (shmem)

    Limits. The call PtlNIInit() accepts a desired set of limits and
    returns a set of actual limits. The acceptable ranges for these
    limits are:

	max_entries > 0 && < 134217728
	max_unexpected_headers > 0
	max_mds > 0 && < 134217728
	max_cts > 0 && < 134217728
	max_eqs > 0 && < 134217728
	max_pt_index >= 63
	max_list_size > 0 && < 4294967296
	max_triggered_ops > 0 && < 4294967296
	max_msg_size > 0 && < UINT32_MAX
	max_atomic_size >= 8
	max_fetch_atomic_size >= 8
	max_ordered_size >= 8

    Resource Usage. (Describe the memory impact of the above limit settings)

    Status Registers.
	The following status regusters are available:
	- PTL_SR_DROP_COUNT
	- PTL_SR_PERMISSIONS_VIOLATIONS

    Network interfaces.
	The following network interfaces are available:
	- PTL_IFACE_DEFAULT

    Job identifiers.
	Job identifiers are random numbers generated by yod.

  - InfiniBand (w/ optional shared memory transport, which is not the
    same as shmem above)

    Pre-requisite

      + openmpi 1.4.x or 1.5.x: the test program is MPI based, and
        starting a task necessitate mpirun. Note that older version of
        openmpi (eg 1.4.3) have a memcpy/memmove bug that will show on
        Intel cpus. Either upgrade to the latest 1.4 or 1.5 or use the
        hack at
        https://bugzilla.redhat.com/show_bug.cgi?id=638477#c38.
      + libev-4.0.4 (or similar), available at
        http://software.schmorp.de/pkg/libev.html
      + The KNEM driver from http://runtime.bordeaux.inria.fr/knem/.  (optional)
        Ensure that /dev/knem is readable/writable by the user running the portals
        software. To use if shared memory transport is requested too.
      + The ummunotify driver from
        http://support.systemfabricworks.com/downloads/ummunotify/ummunotify-v2.tar.bz2
        (optional but recommended). Ensure that /dev/ummunotify is
        readable/writable by the user running the portals software.

    Build:
	  Note that the paths to mpi may not be necessary or may need to
	  be changed depending on your linux distribution.

      * x86_64 (minimal, no shared memory):
		  ./configure CFLAGS="-ggdb -Wall -I/usr/lib64/openmpi/1.4-gcc/include" LDFLAGS="-L/usr/lib64/openmpi/1.4-gcc/lib" --with-implementation=ib --with-test-runtime=mpi

      * x86_64 (optimized, with shared memory):
./configure CFLAGS="-ggdb -Wall -I/usr/lib64/openmpi/1.4-gcc/include" LDFLAGS="-L/usr/lib64/openmpi/1.4-gcc/lib" --with-implementation=ib --with-test-runtime=mpi --with-knem=/opt/knem --enable-ib-shmem --enable-fast

    Test :
      * Type "make check" in the main directory.
      * test/sfw/make_test_relay.pl can build a special script for a given amount
        of ranks. In test/sfw, use mpirun to start the test:
         -  ./make_test_relay.pl  > test_relay.xml
         -  mpirun  -H localhost -n 9 ./ptl_test -f test_relay.xml 

    Building an RPM:
      * make dist       --> this will create portals-4.0.tar.gz
      * rpmbuild -ta portals-4.0.tar.gz

    If mpi is in a non standard path, add CFLAGS and LDFLAGS to rpmbuild, such as:
      CFLAGS="-I/usr/lib64/openmpi/1.4-gcc/include" LDFLAGS=-L/usr/lib64/openmpi/1.4-gcc/lib 

    Limitations:
      * A program may not open more than one NID in its lifetime.
